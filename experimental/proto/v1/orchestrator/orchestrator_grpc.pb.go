// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: orchestrator.proto

package orchestrator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginOrchestratorClient is the client API for PluginOrchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginOrchestratorClient interface {
	// Fetch the contents of blob.
	GetBlobs(ctx context.Context, in *GetBlobsRequest, opts ...grpc.CallOption) (*GetBlobsResponse, error)
	// Fetch the contents of a given manifest.
	GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (*GetManifestResponse, error)
}

type pluginOrchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginOrchestratorClient(cc grpc.ClientConnInterface) PluginOrchestratorClient {
	return &pluginOrchestratorClient{cc}
}

func (c *pluginOrchestratorClient) GetBlobs(ctx context.Context, in *GetBlobsRequest, opts ...grpc.CallOption) (*GetBlobsResponse, error) {
	out := new(GetBlobsResponse)
	err := c.cc.Invoke(ctx, "/orchestrator.PluginOrchestrator/GetBlobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginOrchestratorClient) GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (*GetManifestResponse, error) {
	out := new(GetManifestResponse)
	err := c.cc.Invoke(ctx, "/orchestrator.PluginOrchestrator/GetManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginOrchestratorServer is the server API for PluginOrchestrator service.
// All implementations must embed UnimplementedPluginOrchestratorServer
// for forward compatibility
type PluginOrchestratorServer interface {
	// Fetch the contents of blob.
	GetBlobs(context.Context, *GetBlobsRequest) (*GetBlobsResponse, error)
	// Fetch the contents of a given manifest.
	GetManifest(context.Context, *GetManifestRequest) (*GetManifestResponse, error)
	mustEmbedUnimplementedPluginOrchestratorServer()
}

// UnimplementedPluginOrchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedPluginOrchestratorServer struct {
}

func (UnimplementedPluginOrchestratorServer) GetBlobs(context.Context, *GetBlobsRequest) (*GetBlobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlobs not implemented")
}
func (UnimplementedPluginOrchestratorServer) GetManifest(context.Context, *GetManifestRequest) (*GetManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedPluginOrchestratorServer) mustEmbedUnimplementedPluginOrchestratorServer() {}

// UnsafePluginOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginOrchestratorServer will
// result in compilation errors.
type UnsafePluginOrchestratorServer interface {
	mustEmbedUnimplementedPluginOrchestratorServer()
}

func RegisterPluginOrchestratorServer(s grpc.ServiceRegistrar, srv PluginOrchestratorServer) {
	s.RegisterService(&PluginOrchestrator_ServiceDesc, srv)
}

func _PluginOrchestrator_GetBlobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginOrchestratorServer).GetBlobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orchestrator.PluginOrchestrator/GetBlobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginOrchestratorServer).GetBlobs(ctx, req.(*GetBlobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginOrchestrator_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginOrchestratorServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orchestrator.PluginOrchestrator/GetManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginOrchestratorServer).GetManifest(ctx, req.(*GetManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginOrchestrator_ServiceDesc is the grpc.ServiceDesc for PluginOrchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginOrchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestrator.PluginOrchestrator",
	HandlerType: (*PluginOrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlobs",
			Handler:    _PluginOrchestrator_GetBlobs_Handler,
		},
		{
			MethodName: "GetManifest",
			Handler:    _PluginOrchestrator_GetManifest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestrator.proto",
}
